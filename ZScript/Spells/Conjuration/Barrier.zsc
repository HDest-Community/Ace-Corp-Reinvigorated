class OldBarrierSpell : OldArcanumSpell
{
	override int GetIndex() { return 20; }
	override class<OldArcanumSpellTree> GetTree() { return 'OldArcanumTreeConjuration'; }
	override string GetName() { return "Barrier"; }
	override int GetSpellType() { return SType_Targeted; }
	override int, int GetCastRequirements() { return 200, 0; }
	override string GetDescription() { return "Creates a 10m-wide impenetrable energy wall 1m in front of you. Lasts 90 seconds. Blocks movement and projectiles."; }
	override string GetTechnicalInfo() { return "Targeted, Touch"; }
	override int GetMaxLevel() { return 1; }
	override class<OldArcanumSigil> GetSigil() { return 'OldBarrierSigil'; }
}

class OldBarrierSigil : OldArcanumSigil
{
	override void ActivateTargeted()
	{
		FLineTraceData Data;
		LineTrace(angle, HDCONST_ONEMETRE * 1, pitch, TRF_THRUACTORS, 0, 0, 0, Data);
		Actor a = Spawn("OldArcanumBarrierManager", Data.HitLocation);
		a.Angle = Angle;
		PlayCastSound(self, "Arcanum/Conjuration/Barrier");
	}

	override void InitRuneSlots()
	{
		vector2 Size = (2, 3.333);
		double X = 18.2, Y = 0;
		double RSize = 0.6;
		CreateRuneSlot((-X, 0), Size, RSize);
		CreateRuneSlot((X, 0), Size, RSize);

		X = 11.4; Y = 3.9;
		CreateRuneSlot((-X, Y), Size, RSize);
		CreateRuneSlot((X, Y), Size, RSize);
		CreateRuneSlot((X, -Y), Size, RSize);
		CreateRuneSlot((-X, -Y), Size, RSize);
	}

	Default
	{
		OldArcanumSigil.FadeOutSpeedMult 2.0;
		+OldArcanumSigil.DONTPITCH
		StencilColor "70C3F0";
	}

	States
	{
		Spawn:
			CRCN C 0;
			Goto Super::Spawn;
	}
}

class OldArcanumBarrierManager : Actor
{
	override void PostBeginPlay()
	{
		SetOrigin((pos.x, pos.y, pos.z - (Height / 2)), false);
		double RelZ = pos.z - floorz;
		if (RelZ < 2)
		{
			SetOrigin((pos.x, pos.y, pos.z + abs(RelZ) + 2), false);
		}
		Super.PostBeginPlay();
	}

	protected Array<Actor> Blockers;

	Default
	{
		Height 112;
		+NOBLOCKMAP
		+NOGRAVITY
		+NOSECTOR
		ReactionTime 35 * 90;
	}

	protected int SpawnIndex;

	States
	{
		Spawn:
			TNT1 A 2 NoDelay
			{
				Actor a; bool success;
				double SpawnHeight = Height / 2;
				[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, 0, SpawnHeight + 44, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
				[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, 0, SpawnHeight + 22, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
				[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, 0, SpawnHeight, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
				[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, 0, SpawnHeight - 22, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
				[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, 0, SpawnHeight - 44, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
				SpawnIndex++;
			}
		SpawnNext:
			TNT1 A 2
			{
				// [Ace] Completely eyeballed it. Don't touch unless really necessary.
				// It's a little over 10m but I can't make it perfect.
				if (SpawnIndex == 10)
				{
					SetStateLabel('Idle');
					return;
				}

				Actor a; bool success;
				for (int i = -1; i <= 1; ++i) // [Ace] Does it look stupid? Yes. Does it work? Yes. Therefore, it's not stupid.
				{
					if (i == 0)
					{
						continue;
					}

					double SpawnHeight = Height / 2;
					if (SpawnIndex % 2 == 1)
					{
						[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, (23 * SpawnIndex) * i, SpawnHeight + 33, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
						[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, (23 * SpawnIndex) * i, SpawnHeight + 11, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
						[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, (23 * SpawnIndex) * i, SpawnHeight - 11, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
						[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, (23 * SpawnIndex) * i, SpawnHeight - 33, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
					}
					else
					{
						[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, (23 * SpawnIndex) * i, SpawnHeight + 44, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
						[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, (23 * SpawnIndex) * i, SpawnHeight + 22, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
						[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, (23 * SpawnIndex) * i, SpawnHeight, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
						[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, (23 * SpawnIndex) * i, SpawnHeight - 22, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
						[success, a] = A_SpawnItemEx("OldArcanumBarrier", 0, (23 * SpawnIndex) * i, SpawnHeight - 44, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
					}
				}
				SpawnIndex++;
			}
			Loop;
		Idle:
			TNT1 A 1
			{
				if (--ReactionTime <= 0)
				{
					// [Ace] These are the first ones.
					if (SpawnIndex == 1)
					{
						for (int i = 5; i > 0; --i)
						{
							Blockers[i - 1].SetStateLabel('Death');
							Blockers.Pop();
						}
						Destroy();
						return;
					}
					else
					{
						A_SetTics(2);
						int VSize = Blockers.Size();
						for (int i = VSize; i > VSize - (SpawnIndex % 2 == 1 ? 5 : 4) * 2; --i)
						{
							Blockers[i - 1].SetStateLabel('Death');
							Blockers.Pop();
						}
						SpawnIndex--;
					}
				}
			}
			Loop;
	}
}

class OldArcanumBarrier : Actor
{
	override void PostBeginPlay()
	{
		// [Ace] I need the pivot point of the sprite.
		A_SpriteOffset(0, -Height / 2);
		SetOrigin((pos.x, pos.y, pos.z - (Height / 2)), false);
		InitialAngle = Angle;
		A_GiveInventory('ImmunityToFire');
		Super.PostBeginPlay();
	}

	override void Tick()
	{
		if (Angle != InitialAngle)
		{
			Angle = InitialAngle;
		}
		A_Stop();

		//AceCore.DrawXYZ(self);

		Super.Tick();
	}

	Default
	{
		Mass 10000;
		Radius 15;
		Height 22;
		+NOGRAVITY
		+SOLID
		+SHOOTABLE
		+NODAMAGE
		+NOBLOOD
		+FORCEYBILLBOARD
		+DONTTHRUST
		+WALLSPRITE
		Renderstyle "Add";
		Scale 0;
	}

	protected double InitialAngle;

	States
	{
		Spawn:
			ARBR A 1
			{
				if (Scale.x < 0.2)
				{
					Scale += (0.04, 0.04 / 1.2);
				}
				else
				{
					SetStateLabel('SpawnLoop');
				}
			}
			Loop;
		SpawnLoop:
			ARBR A 1
			{
				A_SetTics(random(1, 4));
				Alpha = frandom(0.85, 1.00);
			}
			Loop;
		Death:
			ARBR A 1
			{
				Scale *= 0.7;
				if (Scale.x < 0.02)
				{
					Destroy();
					return;
				}
			}
			Loop;
	}
}