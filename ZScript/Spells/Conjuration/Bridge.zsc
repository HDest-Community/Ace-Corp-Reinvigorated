class OldBridgeSpell : OldArcanumSpell
{
	override int GetIndex() { return 30; }
	override class<OldArcanumSpellTree> GetTree() { return 'OldArcanumTreeConjuration'; }
	override string GetName() { return "Bridge"; }
	override int GetSpellType() { return SType_SelfOrMass; }
	override int, int GetCastRequirements() { return 200, 0; }
	override string GetDescription() { return "Creates a 20m-long energy bridge. Lasts 30 seconds."; }
	override string GetTechnicalInfo() { return "Angled"; }
	override int GetMaxLevel() { return 1; }
	override class<OldArcanumSigil> GetSigil() { return 'OldBridgeSigil'; }
}

class OldBridgeSigil : OldArcanumSigil
{
	override void ActivateSelfOrMass()
	{
		Actor a = Spawn("OldArcanumBridgeManager", (pos.x, pos.y, master.pos.z));
		a.Angle = Angle;
		PlayCastSound(self, "Arcanum/Conjuration/Bridge");
	}

	override void InitRuneSlots()
	{
		vector2 Size = (2, 3.333);
		double X = 0, Y = 18.2;
		double RSize = 0.6;
		CreateRuneSlot((0, Y), Size, RSize);
		CreateRuneSlot((0, -Y), Size, RSize);

		X = 3.9; Y = 11.4;
		CreateRuneSlot((-X, Y), Size, RSize);
		CreateRuneSlot((X, Y), Size, RSize);
		CreateRuneSlot((X, -Y), Size, RSize);
		CreateRuneSlot((-X, -Y), Size, RSize);
	}


	Default
	{
		OldArcanumSigil.FadeOutSpeedMult 2.0;
		StencilColor "70C3F0";
	}

	States
	{
		Spawn:
			CRCN D 0;
			Goto Super::Spawn;
	}
}

class OldArcanumBridgeManager : OldArcanumBarrierManager
{
	override void PostBeginPlay()
	{
		Actor.PostBeginPlay();
	}
	Default
	{
		Height 1;
		ReactionTime 35 * 30;
	}

	const Segments = 37;

	States
	{
		Spawn:
			TNT1 A 2 NoDelay
			{
				if (SpawnIndex == Segments)
				{
					SetStateLabel('Idle');
					return;
				}

				Actor a; bool success;
				if (SpawnIndex % 2 == 1)
				{
					[success, a] = A_SpawnItemEx("OldArcanumBridge", (23 * SpawnIndex), -39.75, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
					[success, a] = A_SpawnItemEx("OldArcanumBridge", (23 * SpawnIndex), -13.25, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
					[success, a] = A_SpawnItemEx("OldArcanumBridge", (23 * SpawnIndex), 13.25, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
					[success, a] = A_SpawnItemEx("OldArcanumBridge", (23 * SpawnIndex), 39.75, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
				}
				else
				{
					[success, a] = A_SpawnItemEx("OldArcanumBridge", (23 * SpawnIndex), -53, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
					[success, a] = A_SpawnItemEx("OldArcanumBridge", (23 * SpawnIndex), -26.5, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
					[success, a] = A_SpawnItemEx("OldArcanumBridge", (23 * SpawnIndex), flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
					[success, a] = A_SpawnItemEx("OldArcanumBridge", (23 * SpawnIndex), 26.5, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
					[success, a] = A_SpawnItemEx("OldArcanumBridge", (23 * SpawnIndex), 53, flags: SXF_NOCHECKPOSITION); Blockers.Push(a);
				}
				SpawnIndex++;
			}
			Loop;
		Idle:
			TNT1 A 1
			{
				if (--ReactionTime <= 0)
				{
					A_SetTics(2);
					int VSize = Blockers.Size();
					int BarriersToDelete = (Segments - SpawnIndex) % 2 == 1 ? 4 : 5;
					if (VSize >= BarriersToDelete)
					{
						for (int i = 0; i < BarriersToDelete; ++i)
						{
							Blockers[i].SetStateLabel('Death');
						}
						Blockers.Delete(0, BarriersToDelete);
						SpawnIndex--;
					}
					else
					{
						Destroy();
						return;
					}
				}
			}
			Loop;
	}
}

class OldArcanumBridge : OldArcanumBarrier
{
	override void PostBeginPlay()
	{
		InitialAngle = Angle;
		A_GiveInventory('ImmunityToFire');
	}

	Default
	{
		Radius 15;
		Height 1;
		-WALLSPRITE
		+FLATSPRITE
		+ACTLIKEBRIDGE
	}

	States
	{
		Spawn:
			ARBR B 1
			{
				if (Scale.x < 0.2)
				{
					Scale += (0.04, 0.04);
				}
				else
				{
					SetStateLabel('SpawnLoop');
				}
			}
			Loop;
		SpawnLoop:
			ARBR B 1
			{
				A_SetTics(random(1, 4));
				Alpha = frandom(0.85, 1.00);
			}
			Loop;
		Death:
			ARBR B 1
			{
				Scale *= 0.7;
				if (Scale.x < 0.02)
				{
					Destroy();
					return;
				}
			}
			Loop;
	}
}