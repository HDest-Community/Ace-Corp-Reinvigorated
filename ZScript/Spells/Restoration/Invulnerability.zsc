class OldInvulnerabilitySpell : OldArcanumSpell
{
	override int GetIndex() { return 60; }
	override class<OldArcanumSpellTree> GetTree() { return 'OldArcanumTreeRestoration'; }
	override string GetName() { return "Invulnerability"; }
	override int GetSpellType() { return SType_SelfOrMass | SType_Targeted; }
	override int, int GetCastRequirements() { return 1000, 0; }
	override string GetDescription() { return "Grants temporary invulnerability that lasts 90 seconds.\n\n\c[Fire]Warning: will set everything on fire.\c-"; }
	override string GetTechnicalInfo() { return "Self, Targeted, Touch"; }
	override int GetMaxLevel() { return 1; }
	override class<OldArcanumSigil> GetSigil() { return 'OldInvulnerabilitySigil'; }
}

class OldInvulnerabilitySigil : OldArcanumSigil
{
	override void ActivateTargeted()
	{
		let plr = HDPlayerPawn(AimTarget());
		if (plr && plr.Health > 0)
		{
			GiveInvulnerability(plr);
		}
	}

	override void ActivateSelfOrMass()
	{
		let plr = HDPlayerPawn(master);
		if (plr)
		{
			GiveInvulnerability(plr);
		}
	}

	private void GiveInvulnerability(HDPlayerPawn plr)
	{
		HDUPK Sphere = HDInvulnerabilitySphere(Spawn("HDInvulnerabilitySphere", plr.pos));
		Sphere.picktarget = plr;
		Sphere.A_HDUPKGive();
	}

	override void InitRuneSlots()
	{
		vector2 BigSize = (8, 13.33);
		CreateRuneSlot((-23, 0), BigSize, 2.25);
		CreateRuneSlot((0, 23), BigSize, 2.25);
		CreateRuneSlot((23, 0), BigSize, 2.25);
		CreateRuneSlot((0, -23), BigSize, 2.25);

		vector2 SmallSize = (6, 10);
		CreateRuneSlot((-41.1, 0), SmallSize, 1.3);
		CreateRuneSlot((0, 41.1), SmallSize, 1.3);
		CreateRuneSlot((41.1, 0), SmallSize, 1.3);
		CreateRuneSlot((0, -41.1), SmallSize, 1.3);
	}

	Default
	{
		Height 44;
		Radius 50;
		OldArcanumSigil.FadeOutSpeedMult 3.0;
		StencilColor "11FF11";
	}

	States
	{
		Spawn:
			CRRE G 0;
			Goto Super::Spawn;
	}
}