class OldThunderclapSpell : OldArcanumSpell
{
	override int GetIndex() { return 20; }
	override class<OldArcanumSpellTree> GetTree() { return 'OldArcanumTreeDestruction'; }
	override string GetName() { return "Thunderclap"; }
	override int GetSpellType() { return SType_Targeted; }
	override int, int GetCastRequirements() { return 30, 0; }
	override string GetDescription() { return String.Format("Strikes target area with \c[Gold]%i\c- lightning bolt%s.", Level, Level > 1 ? "s" : ""); }
	override string GetTechnicalInfo() { return "Targeted, AoE, Dangerous"; }
	override class<OldArcanumSigil> GetSigil() { return 'OldThunderclapSigil'; }
}

class OldThunderclapSigil : OldArcanumSigil
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		ShotsLeft = SigilLevel;
	}

	override void ActivateTargeted()
	{
		if (ShotsLeft == 0)
		{
			ReactionTime = 0;
			return;
		}

		if (GetAge() % 8 == 0)
		{
			FLineTraceData Data;
			double ExtraAngle = (ShotsLeft == SigilLevel ? 0 : frandom(-1.5, 1.5));
			double ExtraPitch = (ShotsLeft == SigilLevel ? 0 : frandom(-1.3, 1.3));
			LineTrace(angle + ExtraAngle, 12600, pitch + ExtraPitch, 0, 0, 0, 0, Data);

			if (Data.HitType != Data.TRACE_HitNone && Data.HitType != Data.TRACE_HasHitSky)
			{
				Actor BSpot = Spawn("BeamSpot", Data.HitLocation - Data.HitDir, ALLOW_REPLACE);
				BSpot.target = self;
				BSpot.stamina = 144;
				BSpot.angle = angle;
				BSpot.pitch = pitch;
			}
			ShotsLeft--;
		}
	}

	override void InitRuneSlots()
	{
		CreateRuneSlot((0, 0), (6, 10), 1.65);
	}

	private int ShotsLeft;

	Default
	{
		OldArcanumSigil.FadeOutSpeedMult 2.0;
		ReactionTime 0xFFFFFF;
		StencilColor "77AFFF";
	}

	States
	{
		Spawn:
			CRDE C 0;
			Goto Super::Spawn;
	}
}